/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package boardgame;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author JaneW
 */
public class BoardGameFrame extends javax.swing.JFrame implements ActionListener {

    private BGBoardView boardView;
    private BGBoard board;
    private int viewHeight, viewWidth;
    private String sStatusMessage;
    private Timer timer, timer2;

    private enum GameState {

        START, LOADING, PLAYING, SWAPPING, END
    };
    private GameState currentState;

    /**
     * Creates new form BoardGameFrame
     */
    public BoardGameFrame() {


        currentState = GameState.START;

        sStatusMessage = "Ready?";
        timer = new Timer(300, this);
        timer2 = new Timer(100, this);

        board = new BGBoard(10, 7);
        board.initialise();


        boardView = new BGBoardView(80, 80);
        boardView.setBoard(board);

        getContentPane().add(boardView);

        initComponents();

        boardView.setBounds(0, panelControls.getHeight(), boardView.getWidth(), boardView.getHeight());
        boardView.setVisible(true);

        this.setTitle("Board Game");
        this.setSize(boardView.getWidth() + 16, boardView.getHeight() + panelControls.getHeight() + 38);
        this.setPreferredSize(new Dimension(boardView.getWidth() + 16, boardView.getHeight() + panelControls.getHeight() + 38));

        // Centre in the middle of the screen
        this.setLocationRelativeTo(null);
        this.pack();




    }

    //Set the status message
    public void setStatusMessage(String sStatusMessage) {
        this.sStatusMessage = sStatusMessage;
    }

    // Set the state of teh command buttons
    private void setGUIState() {
        if (this.getCurrentState() == GameState.START) {
            this.butSwap.setEnabled(false);
            this.butLoad.setEnabled(true);
        } else if (this.getCurrentState() == GameState.LOADING) {
            this.butSwap.setEnabled(false);
            this.butLoad.setEnabled(false);
        } else if (this.getCurrentState() == GameState.SWAPPING) {
            this.butSwap.setEnabled(false);
            this.butLoad.setEnabled(false);
        } else if (this.getCurrentState() == GameState.PLAYING) {
            this.butSwap.setEnabled(true);
            this.butLoad.setEnabled(true);

        }
    }

    public GameState getCurrentState() {
        return currentState;
    }

    public void setCurrentState(GameState currentState) {
        this.currentState = currentState;
    }

    // Timer event has happened so move all the characters
    public void actionPerformed(ActionEvent e) {

        // System.out.println(this.getCurrentState());
        setGUIState();

        // Explode counters...
        if (board.explodeCounters() == 0) {

            // now try deleting counters..
            boolean bDeleted = false;
            if (board.deleteCounters() > 0) {
                bDeleted = true;
            }

            // if we are still loading up the grid at the start of the game then don't count the score.
            if (this.getCurrentState() == GameState.LOADING) {
                board.setGameScore(0);

            }
            // If nothimng was deleted...
            if (bDeleted == false) {

                // try using gravity...
                if (board.gravity() == false) {

                    // next loading new counters at the top
                    if (board.loadNewCounters() == false) {

                        // try matching counters
                        if (board.matchCounters() == true) {
                            // else we have nothing else to do...
                        } else {
                            System.out.println("Done");
                            timer.stop();
                            timer2.stop();
                            // If we were in the initially LOADING set score to 0 as this does not count
                            if (this.getCurrentState() == GameState.LOADING) {

                                board.setGameScore(0);
                            }
                            this.setCurrentState(GameState.PLAYING);
                            setGUIState();
                        }
                    }

                }
            }
        }

        repaint();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelControls = new javax.swing.JPanel();
        butLoad = new javax.swing.JButton();
        labScore = new javax.swing.JLabel();
        butSwap = new javax.swing.JButton();
        labStatus = new javax.swing.JLabel();
        labLevel = new javax.swing.JLabel();
        labSwaps = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelControls.setBackground(new java.awt.Color(204, 255, 204));

        butLoad.setText("Load");
        butLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLoadActionPerformed(evt);
            }
        });

        labScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labScore.setText("Score");

        butSwap.setText("Swap");
        butSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSwapActionPerformed(evt);
            }
        });

        labStatus.setText("Staus Message");

        labLevel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labLevel.setText("Level");

        labSwaps.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labSwaps.setText("Swaps");

        javax.swing.GroupLayout panelControlsLayout = new javax.swing.GroupLayout(panelControls);
        panelControls.setLayout(panelControlsLayout);
        panelControlsLayout.setHorizontalGroup(
            panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(butLoad)
                .addGap(18, 18, 18)
                .addComponent(butSwap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE)
                .addComponent(labLevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labSwaps)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labScore)
                .addContainerGap())
        );
        panelControlsLayout.setVerticalGroup(
            panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butLoad)
                    .addComponent(labScore)
                    .addComponent(butSwap)
                    .addComponent(labStatus)
                    .addComponent(labLevel)
                    .addComponent(labSwaps))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 255, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLoadActionPerformed
        // TODO add your handling code here:

        boolean bLoad = true;
        if (getCurrentState() == GameState.PLAYING) {

            int dialogResult = JOptionPane.showConfirmDialog(null, "Game in progress.  Really re-load?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                bLoad = false;
            }
        }
        if (bLoad == true) {
            this.currentState = GameState.LOADING;
            board.setGameScore(0);
            // board.clear();
            board.initialise();
            timer2.start();
        }

        setGUIState();

    }//GEN-LAST:event_butLoadActionPerformed

    private void butSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSwapActionPerformed
        // TODO add your handling code here:

        String sMessage = "";

        if (board.swapSelected() == true) {
            boolean bMatched = false;
            bMatched = board.matchCounters();

            // If we didn't find a match then swap them back
            if (bMatched == false) {
                board.swapSelected();
                board.addSwaps(-2);
                setStatusMessage("You didn't find a match!");
                System.out.println("Swapped back");
            } else {
                setStatusMessage("Match!!!");
                setCurrentState(GameState.SWAPPING);
                timer.start();
            }
        } else {
            setStatusMessage("Squares need to be adjacent.");
        }
        repaint();
    }//GEN-LAST:event_butSwapActionPerformed

    public void paint(Graphics g) {

        setGUIState();
        labScore.setText("Score: " + Integer.toString(board.getGameScore()));
        labStatus.setText(sStatusMessage);
        labLevel.setText("Level: " + board.getLevel());
        labSwaps.setText("Swaps: " + board.getSwaps());
        super.paint(g);
        boardView.requestFocusInWindow();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BoardGameFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butLoad;
    private javax.swing.JButton butSwap;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labLevel;
    private javax.swing.JLabel labScore;
    private javax.swing.JLabel labStatus;
    private javax.swing.JLabel labSwaps;
    private javax.swing.JPanel panelControls;
    // End of variables declaration//GEN-END:variables
}
